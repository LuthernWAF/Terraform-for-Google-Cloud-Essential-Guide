# data "google_compute_instance" "this" {
#   name = "instance-1"
# }
# output "ip-address" {
#   value = format("IP address of existing server: %s", data.google_compute_instance.this.network_interface[0].access_config[0].nat_ip)
# }


# data "google_netblock_ip_ranges" "netblock" {
#      range_type = "iap-forwarders"
# }

# output "cidr_blocks" {
#   value = data.google_netblock_ip_ranges.netblock.cidr_blocks
# }

# output "cidr_blocks_ipv4" {
#   value = data.google_netblock_ip_ranges.netblock.cidr_blocks_ipv4
# }

# output "cidr_blocks_ipv6" {
#   value = data.google_netblock_ip_ranges.netblock.cidr_blocks_ipv6
# }

data "google_netblock_ip_ranges" "health_checkers" {
  range_type = "health-checkers"
}


data "google_compute_network" "network" {
  name = var.network_name
}

resource "google_compute_firewall" "allow_health_checkers" {
  name    = "${data.google_compute_network.network.name}-allow-health-checkers"
  network = data.google_compute_network.network.self_link

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = data.google_netblock_ip_ranges.health_checkers.cidr_blocks_ipv4
}

data "google_netblock_ip_ranges" "iap_forwarders" {
  range_type = "iap-forwarders"
}

resource "google_compute_firewall" "allow_iap_forwarders" {
  name    = "${data.google_compute_network.network.name}-allow-iap-forwarders"
  network = data.google_compute_network.network.name

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = data.google_netblock_ip_ranges.iap_forwarders.cidr_blocks_ipv4
}